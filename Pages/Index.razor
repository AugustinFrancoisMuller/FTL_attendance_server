@page "/"

@using Microsoft.AspNetCore
@using System.Drawing;
@using QRCoder;
@using System.Drawing.Imaging;
@using System.Globalization;


<PageTitle>FTL</PageTitle>


<form>
    <label for="courseID">Enter the course id:</label>
    <input type="text" id="name" @bind="courseId" />
    <button type="button" @onclick="DisplayQR">display QR-code</button>
</form>

@if (!string.IsNullOrEmpty(courseId))
{
    <img id="updateDiv" src="@QRByte" width="600"/>
}



@code {
    const int DELAY = 1000;
    private Timer timer;

    public string QRByte = "";

    private String timeStamp;
    
    
    Random rnd = new Random();

    string rndString = "";
    string courseId = "";


    // Called by timer every DELAY miliseconds
    private void UpdateTime(object state)
    {
        rnd = new Random();
        rndString = rnd.NextInt64().ToString();
        
        timeStamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
        rndString += "|";
        rndString += courseId;

        QRByte = GenerateQRCode(rndString);

        // call azure functon to add code to myAQL
        
        InvokeAsync(StateHasChanged); // Notify Blazor to update the UI
    }


    // convert string into base64 HTML compatible QR-code image
    public string GenerateQRCode(string QRCodeText)
    {
        using MemoryStream ms = new();
        QRCodeGenerator qrCodeGenerate = new();
        QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode(QRCodeText, QRCodeGenerator.ECCLevel.Q);
        QRCode qrCode = new(qrCodeData);

        using Bitmap qrBitMap = qrCode.GetGraphic(20);
        qrBitMap.Save(ms, ImageFormat.Png);
        string base64 = Convert.ToBase64String(ms.ToArray());

        return(string.Format("data:image/png;base64,{0}", base64));
    }

    private void DisplayQR()
    {
        timer = new Timer(UpdateTime, null, 0, DELAY);
    }

}
